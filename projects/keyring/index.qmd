---
title: "Managing Credentials with keyring"
subtitle: "Developer Toolkit"
description: "Simple Credential Management"
date: 04-23-2025
categories: [R, R-Package, Developer-Toolkit] 
citation: 
    url: https://asenetcky.dev/keyring
draft: false 
---

## The Problem

How many times have you needed to enter an API token or 
perhaps credentials to a service account? Have you ever seen
someone save credentials inside of a script? It happens,
I've seen it - I hate to admit it, but I've probably
done it myself.  It's easy to do when it's crunch time.
You tell yourself, you'll remove them when you're
done testing - but, gasp - it's too late, you've
mindlessly commited and pushed those changes
on up to the remote with git.  

Or maybe you're new and just getting started with
R.  You're almost certainly going to need to
inject a credential or something similiar sooner or
later. You _don't_ have to leave these in your
scripts. There is a better way!

## The Solution
There is an R package out there
that makes it just as easy _not_ to hardcode
credentials into scripts.  That package
is [`keyring`](https://keyring.r-lib.org/index.html)!

Let's take a look.


### Installing `keyring`
```{r install}
# install.packages("pak")
# pak::pak("keyring")

library(keyring)
```


### Putting `keyring` into practice

`keyring` stores credentials using the default credential
manager for your OS. `keyring` makes interacting with
the manager inside of your code fairly seamless.

```{r save-creds}
# keyring can be run interactively with pop ups
# or you set the values in code - execute the code
# and then remove those lines if anything is going to be saved

# save some useful credentials
keyring::key_set_with_value(
  service = "my-service",
  username = "my-username",
  password = "my-super-secret-password-SSSHHHH"
)
```

::: {.callout-important}
    Remember - you're just executing the code and not saving the
    free text in a real world situation.
:::

Now how would we access those credentials for later use?
`service` and `username` becomes the identifier used to 
pull these back into your environment.

```{r recall-credentials}

# if you happen to forget your services
# you can list them all out!
keyring::key_list()

keyring::key_get(service = "my-service", username = "my-username")
```

So the code above just prints straight to console - still not exactly 
what you would want in real life but now that can be saved to
an object and used just about anywhere. 

Let's walk through a plausible example - perhaps you frequent
the [CT Open Data Portal](https://data.ct.gov/)  (yay open data!)
and you have an account with an email and password.

```{r use-it}
keyring::key_set_with_value(
  service = "open data portal",
  username = "me@asenetcky.dev",
  password = "mytotallyrealpassword123"
)

# let's use another awesome r package `RSocrata`

# pak::pak("RSocrata")
# library(RSocrata)

```

