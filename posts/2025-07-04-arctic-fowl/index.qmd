---
title: "Arctic Fowl"
subtitle: "`polars` and `duckplyr`"
description: "Interpreted Languages can have nice things too!"
date: 07-04-2025
categories: [R, R-Package, Developer-Toolkit] 
citation: 
    url: https://asenetcky.dev/posts/2025-05-20-thinking-in-projects/
draft: true 
---

## What a Time to be Alive

In an era where AI is the all the rage, some of the most exciting things I have
encountered and have been playing around with lately have been remixes on old
favorites.  I'm talking of course about working with dataframes.  One of 
my favorites lately has been `polars` TODO: add link in python.

...

I've always admired DuckDB from a distance. Dabbling here or there.  Some 
friends and colleagues of mine have thoroughly enjoyed it. I write a bunch
of SQL code for work, and for me, it has always felt like that - work. I think
that actually has more to do with the locked down work environment with little
to no tooling availible to anyone outside IT (like Data Scientists) than SQL
itself so it is not *really* fair to SQL. However, because of the harsh 
developer experience when dealing with SQL, I try to do  the absolute bare
minimum I need to do and bail as fast as possible.  So DuckDB just never fell
into my lap - until now.

Enter `duckplyr` TODO: link to posit post/tidyverse blog etc...

TODO: Compare and Contrast the two
TODO: Hammer the excellent bits, larger than memory analyses, lazy eval 
and opportunities for optimization.


## Setup

:::{.panel-tabset group="language"}

## R

I'm using `renv` so setup might initially look something like
this in the console:

```r
renv::install("duckplyr", "dplyr", "conflicted")
```

and then at the top of our R scripts:

```{r}
#| label: r-setup

suppressPackageStartupMessages({
    library(conflicted)
    library(duckplyr)
    conflict_prefer("filter", "dplyr") |> suppressMessages()
    library(nanoparquet)
})

```

## Python
I'm using `uv` for python - so setup in the terminal would look 
something like this:

```bash
$ uv init
$ uv add polars
```

and then at the top of our python scripts:

```{python}
#| label: python-setup

import polars as pl
```

:::


#TODO use those parq files from the duckdb example.

## Taking a Look

Right up front I want to say this isn't going to be post where I pick
a favorite and sell you on it. I think having options, in multiple languages
across a few tools is good to have.  I intend to do a bit of exploring here
and highlight why you might want to implement tools such as `duckplyr` and/or
`polars`.

At the time of writing this, I am primarily an R programmer. I have spent more
time with python polars than anything duckdb-related, and quite a bit of time
recently with polars. Still, all of the time with python has been considerably 
less time compared to R. I have experimented a little bit with the duckdb cli
tool in the past, but nothing more than an afternoon or two.  This is my first
real foray into working with the `duckplyr` package.  All this to say, that
I am not an expert in either of these tools and I am likely not working
with them in the most idiomatic way. I'm mostly just here to crush
parquet files and have a good time.
