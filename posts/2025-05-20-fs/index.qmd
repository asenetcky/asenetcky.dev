---
title: "File Systems with `fs`"
subtitle: "Developer Toolkit"
description: "Increasing Portability and Reproducibility"
date: 04-23-2025
categories: [R, R-Package, Developer-Toolkit] 
citation: 
    url: https://asenetcky.dev/keyring
draft: true 
---

## The Premise

How many times have you seen this at the top of an R script
that was shared with you by a friend or colleague?

```{r}
#| eval: false

setwd("~/some/path/not/on/your/computer/")

foo <- function() {
  print("AHHHH I NEED THIS TO WORK I HAVE A DEADLINE")
}

foo()

```

You need that script to run - but it just blows up spectacularly
in your face. You go in to change that line and then the script
works, or it doesn't. I find - more often than not - that
if there is a `setwd()` at the top of a script, that even
if I correct the path there are other depedencies that did
not come along for the ride.  There is nothing wrong
with using `setwd()` or `getwd()` - however, if you can
afford to add another package dependency and you are
programmatically working with the file system I think
the R pakcage `fs` is worth taking along for the ride.


but first ...

## the zen of projects


use repos and/or projects/folders etc...


## why fs over base

It's spelled out right [here](https://fs.r-lib.org/articles/function-comparisons.html).

But the tl;dr is ....

