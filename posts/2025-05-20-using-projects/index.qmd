---
title: "Using Projects to Organize and Think about your Code"
subtitle: "Using `fs` and friends"
description: "Increasing Portability and Reproducibility"
date: 05-20-2025
categories: [R, R-Package, Developer-Toolkit, Developer-Mindset] 
citation: 
    url: https://asenetcky.dev/using-projects
draft: true 
---

## The Premise

How many times have you seen this at the top of an R script
that was shared with you by a friend or colleague?

```{r}
#| eval: false

setwd("~/some/path/not/on/your/computer/")

foo <- function() {
  print("AHHHH I NEED THIS TO WORK I HAVE A DEADLINE")
}

foo()

```

You need that script to run - but it just blows up spectacularly
in your face. You go in to change that line and then the script
works, or it doesn't. I find - more often than not - that
if there is a `setwd()` at the top of a script, that even
if I correct the path there are other depedencies that did
not come along for the ride.  There is nothing wrong
with using `setwd()` or `getwd()` - however, if you can
afford to add another package dependency and you are
programmatically working with the file system I think
the R pakcage `fs` is worth taking along for the ride.


but first ...

## the zen of projects

### some context

I often find that new R users in my line of work don't organize their
work into distinct projects.  If they use the [Rstudio]() IDE
they aren't using rstudio projects with the `.Rproj` files or
workspaces in other IDEs. Using `git` will often force the
use of project folders or at least the mindset of one, but
often git isn't in use either.

I found that, while working in public health during a pandemic
that anything I may have produced in code - no matter how many times
it was relayed to me that the ask was "a one-time thing" - will
live on forever whether you want it to or not. If it provided 
some value, and even if it didn't, it became familiar and 
eventually took on a life all its own.
This is probably true in many other fields - so do yourself a favor
and make sure whatever it is you build is something that
isn't going to haunt you. Use `git` if you're able, and 
if not work in projects to organize your work. It may
not seem like setting up a project is worth it for
a quick todo - but if the ask is worth doing at all,
setup a project however your IDE of choice expects it.
It will become second nature and so fast that the
headaches they solve down the road will more than
make up for the short amount of time learning 
and setting them up.

### benefits of project spaces

So what are these benefits?  Most of the time
some background quality of life magic is happening.
In the case of Rstudio - the scripts are "aware" of
where they are so you usually no longer have use `setwd()` or
`getwd()`.  Project level settings can also be saved to
the project space. I think the biggest benefit of all
is a shift in your own mindset.

what is that shift? I don't know what to call it
so I'm making it up right now - "the zen of projects".
I probably read something like this somewhere and forgot
that this isn't my own idea. So I am so sorry if this is
someone else's idea. I am not trying to pass it off as my own.
If there are other related articles, or there is one 
where inadvertantly took that name from please reach out to me.
I will link them all here!

What is the "zen of projects"? You start to think about your
work as tiny little ecosystems, a functioning unit of work, not as a single script.  
a collection of scripts and all the things you need to for your work to....well, *work*.
My mind instantly flashes back to all the organelles inside of a cell 
the mitochondria, the nucleous and all the other things I've completely
forgotten about until I wrote that very sentence above. I think `git` 
helps you get into this mindset most of all because you want folks
to be able to clone or fork your source code and be able to have it work.

Some of this might seem obvious to those in a more traditional
developer role in a more traditional developer job - but Git use is almost 
non-existent in my area of work. I *almost never* get a `README.md` or other
relevant documentation.
Code isn't thought about much other than as a means to an end in the *now*, 
and not a second thought is paid to the *future*.

So this is for my friends in public health and in government. 
I want to focus on the biggest gains for the least amount of effort. Incorporating
a project space is easy to do, becomes natural and gets folks into
this project zen that will hopefully get folks to start thinking about code reproducibility
and portability.


## why fs over base

It's spelled out right [here](https://fs.r-lib.org/articles/function-comparisons.html).

But the tl;dr is consistancy is king TODO....

## use projects but take nothing for granted

So I went on that whole big thing about using projects, but here is the kicker,
take nothing for granted. Use absolute file paths without hardcoding absolute file paths.

but how? use `fs` and friends.

```{r}
#| label: setup-fs

# install.packages("pak")
# pak::pak("fs")
```

```{r}
#| label: quick-fs

library(fs)

fs::path_home()

fs::path_wd()

fs::dir_tree(
  fs::path_wd("posts"),
  recurse = FALSE
)

fs::dir_tree(
  fs::path_wd("posts"),
  recurse = TRUE
)
```


todo next steps
use tree
show this little folder with tree

TODO:
`here` is great - but less set it and forget - but you'll likely need in projects
with nested folders that use quarto or rmarkdown etc...

## the end part

So what about you? What have you picked up along the way
in your career that you would want new folks starting out
to know?  Anything you picked up from another field, or
even another programming language that your brought with
you to all your projects in other languages?