[
  {
    "objectID": "posts/2025-05-20-thinking-in-projects/index.html",
    "href": "posts/2025-05-20-thinking-in-projects/index.html",
    "title": "Thinking in Projects",
    "section": "",
    "text": "How many times have you seen this at the top of an R script that was shared with you by a friend or colleague?\n\nsetwd(\"~/some/path/not/on/your/computer/\")\n\nfoo &lt;- function() {\n  print(\"AHHHH I NEED THIS TO WORK I HAVE A DEADLINE\")\n}\n\nfoo()\n\nYou need that script to run - but it just blows up spectacularly in your face. You go in to change that line and then the script works, or it doesn’t. I find - more often than not - that if there is a setwd() at the top of a script, that even if I correct the path there are other dependencies that did not come along for the ride.\nWhen I started out learning R I did this alot. I still see this quite often. I see it from folks who have also moved well beyond the basics of R. There is nothing wrong with using setwd() or getwd(). However, I find that it is usually a signal that folks might not be thinking holistically about their code and the greater ecosystem in which it exists. Reproducibility might not always be on the forefront of everyone’s minds, and look, I get it - sometimes you just need to slap something together to solve a problem so you never have to think about it again. For all the other times (and I’d argue even for those just-get-it-done-times) this might be one of those rare moments where doing the more robust thing is also the easier thing to do.\nThe road to reproducibility winds ever onward, and while there are many facets to making your code more reproducible, one of the easiest just about anyone can adopt is a simple reframing of how we perceive our code.\n\nOur code is a project.\n\nEven our small, simple little script is a project, inside of a what I’ll call project-space. I’ll define what I mean by project and project-space and how you can use these mental costructs to think about your code. Also, if you can afford to add another package dependency and you are programmatically working with the file system I think the R package fs is worth taking a look at."
  },
  {
    "objectID": "posts/2025-05-20-thinking-in-projects/index.html#the-premise",
    "href": "posts/2025-05-20-thinking-in-projects/index.html#the-premise",
    "title": "Thinking in Projects",
    "section": "",
    "text": "How many times have you seen this at the top of an R script that was shared with you by a friend or colleague?\n\nsetwd(\"~/some/path/not/on/your/computer/\")\n\nfoo &lt;- function() {\n  print(\"AHHHH I NEED THIS TO WORK I HAVE A DEADLINE\")\n}\n\nfoo()\n\nYou need that script to run - but it just blows up spectacularly in your face. You go in to change that line and then the script works, or it doesn’t. I find - more often than not - that if there is a setwd() at the top of a script, that even if I correct the path there are other dependencies that did not come along for the ride.\nWhen I started out learning R I did this alot. I still see this quite often. I see it from folks who have also moved well beyond the basics of R. There is nothing wrong with using setwd() or getwd(). However, I find that it is usually a signal that folks might not be thinking holistically about their code and the greater ecosystem in which it exists. Reproducibility might not always be on the forefront of everyone’s minds, and look, I get it - sometimes you just need to slap something together to solve a problem so you never have to think about it again. For all the other times (and I’d argue even for those just-get-it-done-times) this might be one of those rare moments where doing the more robust thing is also the easier thing to do.\nThe road to reproducibility winds ever onward, and while there are many facets to making your code more reproducible, one of the easiest just about anyone can adopt is a simple reframing of how we perceive our code.\n\nOur code is a project.\n\nEven our small, simple little script is a project, inside of a what I’ll call project-space. I’ll define what I mean by project and project-space and how you can use these mental costructs to think about your code. Also, if you can afford to add another package dependency and you are programmatically working with the file system I think the R package fs is worth taking a look at."
  },
  {
    "objectID": "posts/2025-05-20-thinking-in-projects/index.html#defining-project-and-project-space",
    "href": "posts/2025-05-20-thinking-in-projects/index.html#defining-project-and-project-space",
    "title": "Thinking in Projects",
    "section": "Defining Project and Project-Space",
    "text": "Defining Project and Project-Space\nI’m using the these terms broadly to cast a wide net. Your Integrated Development Environment (IDE) may have a very concrete concept of a project or some kind of workspace or the folder you are working in. You should 100% take advantage of those quality of life features, however I am being a litte more meta than that. Your code, your logic was created to tackle a problem. This is your project, your solution.\n\nIdeally this solution has everything it needs to stand alone\n\nIf it can stand alone, you can confidently pass it along to a teammate. When users hardcode a file path at the top of the script, their computer at that point in time intrinsically becomes a part of that solution.\n\nYou are not a project.\n\nIt is up to the developer to divorce themselves from the project. It needs to be self-contained. There are many ways of doing this and a great deal of tooling has spring up around divorcing the project from the user and the machine the project was written on. It’s also a spectrum too. You need to be realistic with yourself and your deadlines. If R packages are all the way on “reproducible” end of the spectrum - you may not have time for that level of commitment, so you do what you can and aim to ship easy wins and build up to the ideal in time.\nSo what are these easy wins? You can make code soultion aware of its surroundings. This is where project-space comes into play. Yes, your code physically exists on your machine. You are possibly staring at one or more projects on your machine. But you need to think beyond your machine. These projects can and should be able (to the best of your abilities) exist on any number of machines.\nIf you are tackling a business problem for work - you should strive to be able to have your code run just about anywhere at work should something catastrophic happen to your usual work computer. project-space is a way of thinking about your code being everywhere and nowhere and tackling the problems in your code in the most person-environment agnostic ways possible."
  },
  {
    "objectID": "posts/2025-05-20-thinking-in-projects/index.html#the-easy-win",
    "href": "posts/2025-05-20-thinking-in-projects/index.html#the-easy-win",
    "title": "Thinking in Projects",
    "section": "The Easy Win",
    "text": "The Easy Win\nUsing fs will help to think about, and programmatically interact with your project-space. It’s a wonderful package for working with files, folders and paths. The package is well organized and has consistant names that make finding functionality within the package a breeze.\nInteracting with files and folders is great, but it’s the function fs::path_wd() that I find myself using all the time. You can basically drop this function in your scripts and functions and it is probably going to handle 98% of your project-space pathing issues, with a few exceptions.\nLet’s cover some basic concepts with fs before we finish with fs::path_wd()."
  },
  {
    "objectID": "posts/2025-05-20-thinking-in-projects/index.html#why-fs-over-base",
    "href": "posts/2025-05-20-thinking-in-projects/index.html#why-fs-over-base",
    "title": "Thinking in Projects",
    "section": "Why fs over base?",
    "text": "Why fs over base?\nIt’s spelled out better than I can ever state it in the documentation.\nThe tl;dr is that consistancy is king, and it really is. I cannot emphasize that enough. Nobody likes hidden surprises, much less coming from your behind-schedule, tech-debt-ridden past self. If you can confidently tell what the code is going to do by just reading it. Then your teammates are more likely to tell what that code is going to do by just reading it, and they will thank you for it."
  },
  {
    "objectID": "posts/2025-05-20-thinking-in-projects/index.html#diving-in",
    "href": "posts/2025-05-20-thinking-in-projects/index.html#diving-in",
    "title": "Thinking in Projects",
    "section": "Diving in",
    "text": "Diving in\nYou’ll be constructing alot of paths with fs, but thankfully that is easy!\n\nlibrary(fs)\n\n# few different ways, you can mix and match\npath(\"folder\", \"subfolder\", \"file\", ext = \"R\")\n\nfolder/subfolder/file.R\n\npath(\"folder/subfolder/file.R\")\n\nfolder/subfolder/file.R\n\n\nInspecting an fs path we’ll see that it has it’s own class fs_path.\n\nfile_name &lt;- \"my_file\"\nmy_path &lt;-\n  path(\"folder/subfolder\", file_name, ext = \"csv\")\n\nmy_path\n\nfolder/subfolder/my_file.csv\n\nclass(my_path)\n\n[1] \"fs_path\"   \"character\"\n\n\nSome bells and whistles come along for the ride, but you can mostly think of these as characters with some nice vectorized function friends. Now let’s look at some real files.\n\n# let's create a temporary file\n\n# create the path\ntemp_file &lt;- file_temp(ext = \"R\")\ntemp_file\n\n/tmp/Rtmpbik27P/file183ea8da81b.R\n\n# does it exist yet?\nfile_exists(temp_file)\n\n/tmp/Rtmpbik27P/file183ea8da81b.R \n                            FALSE \n\n# create the file\nfile_touch(temp_file)\n\n# now does it exist?\nfile_exists(temp_file)\n\n/tmp/Rtmpbik27P/file183ea8da81b.R \n                             TRUE \n\n\nLet’s grab some info about this file.\n\n# we can programmatically grab all the pieces about this file and surroundings\n\n# the extension\npath_ext(temp_file)\n\n[1] \"R\"\n\n# the directory\npath_dir(temp_file)\n\n[1] \"/tmp/Rtmpbik27P\"\n\n# file info\nfile_info(temp_file) |&gt;\n  dplyr::select(\"block_size\") |&gt;\n  fs::as_fs_bytes()\n\n4K\n\n# list surroundings\npath_dir(temp_file) |&gt;\n  dir_ls()\n\n/tmp/Rtmpbik27P/file183ea8da81b.R\n/tmp/Rtmpbik27P/libloc_171_2b363be77582bd8f.rds\n/tmp/Rtmpbik27P/libloc_238_3dec933b1be4517c.rds\n/tmp/Rtmpbik27P/libloc_245_3f803f276593ddff.rds\n\n# or get a cool tree!\npath_dir(temp_file) |&gt;\n  dir_tree()\n\n/tmp/Rtmpbik27P\n├── file183ea8da81b.R\n├── libloc_171_2b363be77582bd8f.rds\n├── libloc_238_3dec933b1be4517c.rds\n└── libloc_245_3f803f276593ddff.rds\n\n\n\nKept you waiting, huh?\nLet’s delete that file for now and move on to why we’re here - fs::path_wd().\n\n# delete file\nfile_delete(temp_file)\n\n# and shift focus to where we are\nproject_path &lt;- path_wd()\nproject_path\n\n/home/alex/r-projects/asenetcky.dev/posts/2025-05-20-thinking-in-projects\n\n\nDid you catch that? It’s subtle - and possibly underwhelming. The function knows where it is. What’s more important is what it did not do - it did not mess with and change a user’s project-space. setwd() might be set to a path that does not exist and that is annoying, but at least it would fail fast. What if it didn’t though? What if it silently set it some far off location and one part of your script works, but then the rest start throwing errors or clobbering file that should not be touched.\nfs::path_wd() uses the point of view from the script/function and separates the user from the project and the project-space. Now it doesn’t matter - more or less - where your drop your logic, it will pick up on its surroundings and execute commands.\nIt is also just so easy to drop path_wd() anywhere and save yourself some typing. If you have a deeply nested project you can use that to take care of some of the pathing boilerplate.\nWhat if I wanted to print the first few lines of code from another post? Easy.\n\n# you can add the folders and files into path_wd()\npath_wd(\"file-that-is-definitely-here\")\n\n/home/alex/r-projects/asenetcky.dev/posts/2025-05-20-thinking-in-projects/file-that-is-definitely-here\n\n#  you can substitute path_wd() for our project_path object as well\npath(path_wd(), \"cool-folder\", \"possibly-more-complex-path\")\n\n/home/alex/r-projects/asenetcky.dev/posts/2025-05-20-thinking-in-projects/cool-folder/possibly-more-complex-path\n\n\n\n\nSome Caveats\nIt’s so easy to use, there really isn’t a reason not to use it. Except there is that last 2% of the time where you might not want to use path_wd() and that’s usually when working with a program that shifts the working directory, or at least, it’s focus. An example of that would be Quarto which is what I use to write this website and this very post. The project_path we saved earlier - when I go to print that - the one I see in the notebook/console/terminal is not going to be the same path when the final document is rendered. There are probably some other times when this happens - but that is the biggest one I encounter. That’s not a failing of fs it’s just that different tool altogether is taking the reins for a bit. For something like that - you probably want to use the here package."
  },
  {
    "objectID": "posts/2025-05-20-thinking-in-projects/index.html#so-why-not-here-all-the-time",
    "href": "posts/2025-05-20-thinking-in-projects/index.html#so-why-not-here-all-the-time",
    "title": "Thinking in Projects",
    "section": "So why not here all the time?",
    "text": "So why not here all the time?\nfs and here may overlap a little bit with fs::path_wd() and here::here() but the focus of the packages is completely different. here is all about project directory roots and fs has a little bit of that but the focus is really on working in a file system on your computer.\nAlso, I wanted quick easy wins and I think fs with its fs::path_wd() is just easier to use for most usecases. I think the here package is fantastic and those couple of extra steps will be necessary some of the time. here has really saved my bacon in the past and you should absolutely know about it. Most of the time though, fs::path_wd() is good enough."
  },
  {
    "objectID": "posts/2025-05-20-thinking-in-projects/index.html#being-flexible-but-take-nothing-for-granted",
    "href": "posts/2025-05-20-thinking-in-projects/index.html#being-flexible-but-take-nothing-for-granted",
    "title": "Thinking in Projects",
    "section": "Being flexible but take nothing for granted",
    "text": "Being flexible but take nothing for granted\nSo what did we do here today? We learned that we can be both explicit in our pathing at run time - but flexible enough where we don’t have to hardcode every path so that only we can run our code. We truly can have the best of both worlds.\nfs is great for working within your filesystem, but it is also an entrypoint into thinking about your project in a broader, project focused context.\n\nWhere do we go from here?\nKeep practicing and building cool things of course! Really this project-focused thinking is an introduction to starting to think reproducibly about your code, your methods and your environment. Some incredibly helpful tools you might want to check out if you haven’t are:\n\nrenv: An R package for dependency management - a game changer.\ngit and using repositories: Distributed version control software that really drives home working in projects.\nGitHub template repositories: If you have your projects setup how you like them, why not make a blank template for yourself?\ncontainers: If you haven’t worked with these before - they’ll blow your mind. Read up on Podman or Docker and see how these tackle “well, it works on my machine” problem that we all encounter one way or another.\n\nSo what about you? What have you picked up along the way in your career that you would want new folks starting out to know? Anything you picked up from another field, or even another programming language that your brought with you to all your projects in other languages?"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Alexander Senetcky",
    "section": "",
    "text": "Hello, I’m Alexander Senetcky. You’re in the right place if you want to learn more about me and my work.\nI love working with and teaching open source data-focused tools and programming languages. I’m a father who loves camping, woodworking, computer hardware and making manual espresso - and all the other gear that goes along with coffee brewing at home!\n\nGitHub   Linkedin   Email me"
  },
  {
    "objectID": "presentations/2025-06-10-ggplot2/index.html",
    "href": "presentations/2025-06-10-ggplot2/index.html",
    "title": "Plotting Electric Vehicle Open Data",
    "section": "",
    "text": "Today we’re going to:\n\nIntroduce plotting with R and the ggplot2 package\nProvide resources for further reading\nHighlight some best practices"
  },
  {
    "objectID": "presentations/2025-06-10-ggplot2/index.html#goal",
    "href": "presentations/2025-06-10-ggplot2/index.html#goal",
    "title": "Plotting Electric Vehicle Open Data",
    "section": "",
    "text": "Today we’re going to:\n\nIntroduce plotting with R and the ggplot2 package\nProvide resources for further reading\nHighlight some best practices"
  },
  {
    "objectID": "presentations/2025-06-10-ggplot2/index.html#the-setup",
    "href": "presentations/2025-06-10-ggplot2/index.html#the-setup",
    "title": "Plotting Electric Vehicle Open Data",
    "section": "2 The Setup",
    "text": "2 The Setup\nI’ll be using renv - however, renv is not the focus of today. Plotting in R using the ggplot2 package is. Be sure to check out the doco here. We’re going to start by attaching the libraries with library().\n\n# suppressing the startup messages\nlibrary(tidyverse) |&gt; suppressPackageStartupMessages()\n\n# ggplot2 is a core tidyverse package so it's\n# included in the namespace when folks `library(tidyverse)`"
  },
  {
    "objectID": "presentations/2025-06-10-ggplot2/index.html#the-data",
    "href": "presentations/2025-06-10-ggplot2/index.html#the-data",
    "title": "Plotting Electric Vehicle Open Data",
    "section": "3 The Data",
    "text": "3 The Data\nToday we’re going to use the Electric Vehicle data from our #tidytuesday community challenge.\n\n3.1 Grabbing the Data\nUnfortunately, RSocrata was pulled from the CRAN - so we’re going to have to homebrew our own solution.\nFortunately, I put together a gist on github. You may recall Charles Powell introduced these last year. You can take a look at the gist here.\nWe can use devtools to source the gist and grab the function I wrote to download all the EV data.\n\n\n\n\n\n\nTip\n\n\n\ndevtools is a collection of packages, like the tidyverse that aims to smmoth over alot of rough edges in development. Primarily around building R packages or interacting with GitHub, but there is all sorts of neat things in devtools - so be sure to check it out.\n\n\n\ndevtools::source_gist(\n  id = \"https://gist.github.com/asenetcky/52bf3fa10a2dff08f62da96e2347e018\",\n  sha1 = \"5b27e785462239543a6cda235382ebec7c381471\"\n)\n\nℹ Sourcing gist \"52bf3fa10a2dff08f62da96e2347e018\"\n\n# function exist?\nhead(pull_odp)\n\n                                                                                           \n1 function (domain = \"https://data.ct.gov/\", resource)                                     \n2 {                                                                                        \n3     checkmate::assert(checkmate::check_string(domain), checkmate::check_string(resource, \n4         n.chars = 9L), combine = \"and\")                                                  \n5     resource_string &lt;- glue::glue(\"resource/{resource}.json\")                            \n6     limit &lt;- 10000                                                                       \n\n\nWe have our function, now lets grab that open data.\n\nev &lt;- pull_odp(resource = \"y7ky-5wcz\") # this is the ODP \"four by four\"\n\n\n\n3.2 Data Recon\nLets take a look at this dataset so we can have a better idea of what we are working with.\n\nhead(ev)\n\n# A tibble: 6 × 20\n  id      platetype primarycustomercity primarycustomerstate\n  &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;               \n1 2951643 Passenger ARMONK              NY                  \n2 2945023 Passenger AVON                CT                  \n3 2948019 Passenger AVON                CT                  \n4 2318395 Passenger AVON                CT                  \n5 2952422 Passenger BETHANY             CT                  \n6 2952920 Passenger BOLTON              CT                  \n# ℹ 16 more variables: registration_date_start &lt;chr&gt;,\n#   registration_date_expiration &lt;chr&gt;, registrationusage &lt;chr&gt;,\n#   vehicletype &lt;chr&gt;, vehicleweight &lt;chr&gt;, vehicleyear &lt;chr&gt;,\n#   vehiclemake &lt;chr&gt;, vehiclemodel &lt;chr&gt;, vehiclebody &lt;chr&gt;,\n#   primarycolor &lt;chr&gt;, vehicledeclaredgrossweight &lt;chr&gt;, fuelcode &lt;chr&gt;,\n#   vehiclerecordedgvwr &lt;chr&gt;, vehicle_name &lt;chr&gt;, type &lt;chr&gt;,\n#   vehicle_category &lt;chr&gt;\n\nglimpse(ev)\n\nRows: 60,489\nColumns: 20\n$ id                           &lt;chr&gt; \"2951643\", \"2945023\", \"2948019\", \"2318395…\n$ platetype                    &lt;chr&gt; \"Passenger\", \"Passenger\", \"Passenger\", \"P…\n$ primarycustomercity          &lt;chr&gt; \"ARMONK\", \"AVON\", \"AVON\", \"AVON\", \"BETHAN…\n$ primarycustomerstate         &lt;chr&gt; \"NY\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\", \"CT\",…\n$ registration_date_start      &lt;chr&gt; \"2024-12-31T00:00:00.000\", \"2024-12-31T00…\n$ registration_date_expiration &lt;chr&gt; \"2027-12-30T00:00:00.000\", \"2027-12-30T00…\n$ registrationusage            &lt;chr&gt; \"Regular\", \"Regular\", \"Regular\", \"Regular…\n$ vehicletype                  &lt;chr&gt; \"SUV\", \"SUV\", \"SUV\", \"Passenger\", \"Passen…\n$ vehicleweight                &lt;chr&gt; \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"…\n$ vehicleyear                  &lt;chr&gt; \"2025\", \"2024\", \"2025\", \"2022\", \"2019\", \"…\n$ vehiclemake                  &lt;chr&gt; \"Audi\", \"Cadillac\", \"Tesla\", \"Volvo\", \"Te…\n$ vehiclemodel                 &lt;chr&gt; \"Q5 E Premium 55\", \"Lyriq Lux\", \"Model Y\"…\n$ vehiclebody                  &lt;chr&gt; \"SU\", \"SU\", \"SU\", \"SU\", \"4D\", \"4D\", \"SU\",…\n$ primarycolor                 &lt;chr&gt; \"Gray\", \"Gray\", \"White\", \"Black\", \"Blue\",…\n$ vehicledeclaredgrossweight   &lt;chr&gt; \"0\", \"0\", \"0\", \"808040\", \"0\", \"0\", \"0\", \"…\n$ fuelcode                     &lt;chr&gt; \"H04\", \"E00\", \"E00\", \"H04\", \"E00\", \"E00\",…\n$ vehiclerecordedgvwr          &lt;chr&gt; \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"…\n$ vehicle_name                 &lt;chr&gt; \"Audi Q5 Plug In\", \"Cadillac Lyriq\", \"Tes…\n$ type                         &lt;chr&gt; \"PHEV\", \"BEV\", \"BEV\", \"PHEV\", \"BEV\", \"BEV…\n$ vehicle_category             &lt;chr&gt; \"Light-Duty (Class 1-2)\", \"Light-Duty (Cl…\n\n\nSo we have 20 columns and 60,489 rows.\n\n\n3.3 Quick Wrangle!\n\nI don’t want to spoil anyone’s sense of discovery with these data. So I am going to just quickly wrangle it and skip over it, but feel free to take a look at the source code when you have time. Or after you’re done experimenting with it.\n\n\n\nShow the code\ndata &lt;-\n  ev |&gt;\n  mutate(\n    across(\n      .cols = c(\n        id,\n        vehicleweight,\n        vehicleyear,\n        vehicledeclaredgrossweight,\n        vehiclerecordedgvwr,\n      ),\n      .fns = as.numeric\n    ),\n    across(\n      .cols = c(\n        registration_date_start,\n        registration_date_expiration\n      ),\n      .fns = as_date\n    )\n  )\n\nchar_data &lt;-\n  data |&gt;\n  select(where(is.character))\n\nchar_data &lt;-\n  data |&gt;\n  select(where(is.character))\n\nmaybe_factors &lt;-\n  map(\n    char_data,\n    \\(var) {\n      count(char_data, {{ var }}, sort = TRUE)\n    }\n  ) |&gt;\n  keep(\\(df) nrow(df) &lt; 100) |&gt;\n  names()\n\nev &lt;-\n  data |&gt;\n  mutate(\n    across(\n      .cols = all_of(maybe_factors),\n      .fns = \\(col) {\n        col |&gt;\n          forcats::as_factor() |&gt;\n          forcats::fct_infreq()\n      }\n    )\n  )"
  },
  {
    "objectID": "presentations/2025-06-10-ggplot2/index.html#ggplot2-and-friends",
    "href": "presentations/2025-06-10-ggplot2/index.html#ggplot2-and-friends",
    "title": "Plotting Electric Vehicle Open Data",
    "section": "4 ggplot2 and friends",
    "text": "4 ggplot2 and friends\nggplot2 is now over 10 years old and a stable and trusted package for visualizations. It is based on the core philosphy around Leland Wilkinson’s The Grammar of Graphics.\n\nWilkinson, L. (2005), The Grammar of Graphics, 2nd ed., Springer.\n\nIf you like, you can read up on how ggplot2 incorporates those ideals ggplot2: Elegant Graphics for Data Analysis (3e).\nIt’s probably safe to say it is a cornerstone of the R community.\nThe examples, and documentation you can find online is often extensive and well written. python even has a port of it with the plotnine package.\n\n4.1 Syntax: a note about +\nRight away folks are going to notice that ggplot2 uses a different syntax than the usual base pipe |&gt; or maggritr pipe %&gt;% that you will often see out in the wild. This is primarily down to how old the package is, however, I find that + more accurately describes the thought process involved with crafting a plot.\n\n\n\n\n\n\nTip\n\n\n\nWith pipes, actions happen linearly in order, whereas with + you can think of ggplot2 plots like building up a layer cake. You are adding layers, quite literally with a +. The order of the layers doesn’t matter quite as much as the whole."
  },
  {
    "objectID": "presentations/2025-06-10-ggplot2/index.html#ggplot-2-in-action",
    "href": "presentations/2025-06-10-ggplot2/index.html#ggplot-2-in-action",
    "title": "Plotting Electric Vehicle Open Data",
    "section": "5 ggplot 2 in action",
    "text": "5 ggplot 2 in action\nggplot2 is fairly flexible in how you structure your commands, so you’re likley to see some variations between developers.\n\n# we can start with the data, or a call to `ggplot()`\n# I prefer starting with the data and piping it in, otherwise\n# folks can use ggplot(data = ev, ...)\n\nev |&gt;\n  ggplot(\n    mapping = aes(\n      # we're mapping our aesthetic, think of it like a base we pin layers to\n      x = registration_date_start, # x axis\n      y = vehicletype # y axis\n    )\n  )\n\n\n\n\n\n\n\n\nIf we just run the above, we’ll get a blank plot. However, take a quick look at that - so much of the stage has already been laid out for us. ggplot2 has fairly sensible defaults, so for the folks who want to get in and get out quickly, they can do that. This allows plotting and visualizations to be used as one part of an exploratory analysis, and not just as a final, finished product, because it is so quick and easy to do once users are acquainted with ggplot2.\n\n5.1 Adding Details\nHow about we fill in some useful details, no?\n\n# Let's add some layers!\nev |&gt;\n  ggplot(\n    mapping = aes(\n      # we're mapping our aesthetic, think of it like a base we pin layers to\n      x = registration_date_start # x axis\n    )\n  ) +\n  geom_bar() # How about some bars?\n\n\n\n\n\n\n\n\nYou can combine geom_ layers!\nWe can have one geom:\n\n\nCode\ncount_by_day &lt;-\n  ev |&gt;\n  count(registration_date_start, name = \"count\")\n\ncount_by_day |&gt;\n  ggplot(\n    mapping = aes(\n      x = registration_date_start,\n      y = count\n    )\n  ) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nOr two - sharing the same aesthetic and variables\n\ncount_by_day |&gt;\n  ggplot(\n    mapping = aes(\n      x = registration_date_start,\n      y = count\n    )\n  ) +\n  geom_point() +\n  geom_smooth(\n    method = \"lm\",\n    se = FALSE,\n    color = \"red\",\n    linewidth = 1.5\n  ) |&gt;\n    suppressMessages()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\nGoodness there is alot going on there!\nDoes day of week make a difference? Let’s find out.\n\nev |&gt;\n  select(registration_date_start) |&gt;\n  mutate(\n    dow = wday(\n      registration_date_start,\n      label = TRUE\n    )\n  ) |&gt;\n  count(registration_date_start, dow) |&gt;\n  ggplot() +\n  geom_boxplot(aes(dow, n))\n\n\n\n\n\n\n\n\nNotice again that we had some fairly sensible defaults, without having to dig into all the arguments of the functions.\n\n\n5.2 The Ask\nPretend for a moment that our supervisor wants to compare the vehicletype over time. We’ll do another quick wrangle so we can more easily compare types over time.\n\nagg_by_year_quarter_type &lt;-\n  ev |&gt;\n  mutate(\n    year = year(registration_date_start),\n    quarter = quarter(registration_date_start),\n    vehicletype = forcats::fct_lump_prop(\n      vehicletype,\n      prop = .01\n    )\n  ) |&gt;\n  count(year, quarter, vehicletype, name = \"type_count\")\n\nagg_by_year_quarter_type |&gt;\n  ggplot() +\n  geom_col(\n    aes(\n      x = quarter,\n      y = type_count\n    )\n  )\n\n\n\n\n\n\n\n\nwhat about year and quarter?\n\nagg_by_year_quarter_type |&gt;\n  ggplot() +\n  geom_col(\n    aes(\n      x = quarter,\n      y = type_count\n    )\n  ) +\n  facet_grid(cols = vars(year))\n\n\n\n\n\n\n\n\n\n\n5.3 Adding Color based on Features in the Data\nDidn’t we want to compare vehicletype? let’s do that….but how?\nUsing color!\n\nagg_by_year_quarter_type |&gt;\n  ggplot() +\n  geom_col(\n    aes(\n      x = quarter,\n      y = type_count,\n      # now colors are added to break out based on values in the data\n      fill = vehicletype\n    ),\n    position = position_dodge()\n  ) +\n  facet_grid(cols = vars(year))\n\n\n\n\n\n\n\n\nLet’s natural log transform these data to get rid of that skew.\n\n# using lubridate and forcats\nagg_by_year_quarter_type &lt;-\n  agg_by_year_quarter_type |&gt;\n  mutate(log_type = log(type_count))\n\nhead(agg_by_year_quarter_type)\n\n# A tibble: 6 × 5\n   year quarter vehicletype type_count log_type\n  &lt;dbl&gt;   &lt;int&gt; &lt;fct&gt;            &lt;int&gt;    &lt;dbl&gt;\n1  2022       1 Passenger          949    6.86 \n2  2022       1 SUV                627    6.44 \n3  2022       1 Truck               10    2.30 \n4  2022       1 Van                  5    1.61 \n5  2022       1 Other                2    0.693\n6  2022       2 Passenger         1428    7.26 \n\n\nAnd try again.\n\nagg_by_year_quarter_type |&gt;\n  ggplot() +\n  geom_col(\n    aes(quarter, log_type, fill = vehicletype),\n    position = position_dodge()\n  ) +\n  facet_grid(cols = vars(year))\n\n\n\n\n\n\n\n\nNow, I want to save some typing. ggplot2 objects can be saved and combined in fun and exciting ways.\n\nbase &lt;-\n  agg_by_year_quarter_type |&gt;\n  ggplot(\n    aes(quarter, log_type, fill = vehicletype)\n  ) +\n  facet_grid(cols = vars(year))\n\nbase\n\n\n\n\n\n\n\n\nNothing in that plot until we add a geom_. So just like our plot with the points and the trendline where we combined geom_’s in one end to end statement - you can combine saved ggplot2 objects with geom_’s as well.\n\ncol_base &lt;- base + geom_col(position = position_dodge())\ncol_base\n\n\n\n\n\n\n\n\nCool… now we can focus on making this look nicer.\n\n\n5.4 Tweaking the look and feel\nggplot2 has a number of built in themes, and you can even make your own. State of Connecticut has some newish style specifications, sounds like a great theme to make and have on hand. Why not ship it in an R package?\n\n\n\n\n\n\nTip\n\n\n\nOPM took that style spec and ran with it in their publication: CT Data Visualization Guidelines\n\n\nHere are some common built-in themes:\n\n# there are many to choose from - and you can even build your own!\n\ncol_base + theme_classic()\n\n\n\n\n\n\n\ncol_base + theme_bw()\n\n\n\n\n\n\n\ncol_base + theme_minimal()\n\n\n\n\n\n\n\n\n\n# now for the labels\nwith_labels &lt;-\n  col_base +\n  theme_classic() +\n  # add some labels\n  labs(\n    title = \"This is a Title\",\n    subtitle = paste(\"Subtitle as of\", lubridate::today()),\n    caption = \"this is a caption - Open Data is Awesome!\",\n    tag = \"This is a tag\",\n    # the next bit refers to the mapped variables x, y etc... BUT it may\n    # not always be x and y\n    x = \"This is an x axis\",\n    y = \"This is a y axis\",\n    fill = \"my fill values\"\n  )\n\nwith_labels\n\n\n\n\n\n\n\n\n\n\n5.5 Opinionated Polish\n\nbase +\n  geom_col(\n    position = position_dodge(), # I want bars side by side, not stacked\n    col = \"black\" # just a black outline\n  ) +\n  scale_fill_viridis_d() + # use viridis color scale\n  theme_classic() + # we can use a default theme\n  theme(\n    # and add our own components!\n    legend.position = \"bottom\",\n    legend.direction = \"horizontal\"\n  ) +\n  labs(\n    x = \"\", # I don't want axis labels\n    y = \"\",\n    fill = \"\",\n    title = \"Natural Log of Vehicle Type Count by Quarter by Year\"\n  )"
  },
  {
    "objectID": "projects/strata/index.html",
    "href": "projects/strata/index.html",
    "title": "strata",
    "section": "",
    "text": "strata\nstrata is my R-package that serves as a lightweight automation framework that teams without access to modern orchestration tools can implement easily.\n\nstrata documenation\nstrata on CRAN\n\n\n\n\n\nCitationBibTeX citation:@online{senetcky2025,\n  author = {Senetcky, Alexander},\n  title = {Strata},\n  date = {2025-06-02},\n  url = {https://asenetcky.dev/projects/strata/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nSenetcky, Alexander. 2025. “Strata.” June 2, 2025. https://asenetcky.dev/projects/strata/."
  },
  {
    "objectID": "posts.html",
    "href": "posts.html",
    "title": "Blog",
    "section": "",
    "text": "Thinking in Projects\n\n\nUsing fs and friends\n\n\n\nR\n\nR-Package\n\nDeveloper-Toolkit\n\nDeveloper-Mindset\n\n\n\nIncreasing Portability and Reproducibility\n\n\n\n\n\nJun 5, 2025\n\n\nAlexander Senetcky\n\n\n\n\n\n\n\n\n\n\n\n\nManaging Credentials with keyring\n\n\nDeveloper Toolkit\n\n\n\nR\n\nR-Package\n\nDeveloper-Toolkit\n\n\n\nSimple Credential Management\n\n\n\n\n\nApr 23, 2025\n\n\nAlexander Senetcky\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a Data Scientist and an Epidemiologist currently working for Connecticut Department of Public Health (DPH). I am passionate about the R programming language, Linux and other free and open-source software (FOSS).\nIf you happen to work for the State of Connecticut, you can often find me presenting or helping out with our inter-agency R_User Group.\nDuring my 7 years in public health I’ve worked with my colleagues to tackle the opioid epidemic in Connecticut, expand the use of near-realtime syndromic surveillance, and helped bring automated daily and weekly reporting to DPH and to the public through our Open Data Portal."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "distiller\n\n\n\nR\n\nR-Package\n\nCDC\n\nEPHT\n\npublic health\n\n\n\nDistill your wrangled data down to the CDC’s EPHT XML format\n\n\n\n\n\nJun 2, 2025\n\n\nAlexander Senetcky\n\n\n\n\n\n\n\n\n\n\n\n\nstrata\n\n\n\nR\n\nR-Package\n\n\n\nSimple Framework for Simple Automation\n\n\n\n\n\nJun 2, 2025\n\n\nAlexander Senetcky\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/distiller/index.html",
    "href": "projects/distiller/index.html",
    "title": "distiller",
    "section": "",
    "text": "distiller\ndistiller is my R-package I wrote to help me submit data to CDC’s Environmental Public Health Tracking.\nThis package will take your wrangled data and create the XML documents as required by the CDC specification. Check it out and please let me know if it helps ease your submissions.\nYou can find distiller documentation here.\n\n\n\n\nCitationBibTeX citation:@online{senetcky2025,\n  author = {Senetcky, Alexander},\n  title = {Distiller},\n  date = {2025-06-02},\n  url = {https://asenetcky.dev/projects/distiller/},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nSenetcky, Alexander. 2025. “Distiller.” June 2, 2025. https://asenetcky.dev/projects/distiller/."
  },
  {
    "objectID": "presentations.html",
    "href": "presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "Plotting Electric Vehicle Open Data\n\n\nwith ggplot2 and friends\n\n\n\nR\n\nR-User Group\n\nTidyTuesday\n\nggplot2\n\nbeginner\n\n\n\nPresentation given to CT R-User Group for our homegrown tidytuesday community challenge\n\n\n\n\n\nJun 10, 2025\n\n\nAlexander Senetcky\n\n\n\n\n\n\n\n\n\n\n\n\nR Packages: There and Back Again\n\n\n\n\n\n\nR\n\nR-User Group\n\nR Packages\n\n\n\nPresentation given to CT R-User Group about my thoughts on R package development\n\n\n\n\n\nDec 10, 2024\n\n\nAlexander Senetcky\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#it-is-possible",
    "href": "presentations/2024-12-10-rpkgs/index.html#it-is-possible",
    "title": "R Packages: There and Back Again",
    "section": "It IS possible!",
    "text": "It IS possible!\n\nThere are excellent free resources out there\nAlmost everything you need to know is in R Packages 2nd Edition\n\n\nI just didn’t hear this enough, but it is possible and if the pros I mention later on in the presentation are critical to your projects, then I strongly encourage you to give package building a try."
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#package-scope",
    "href": "presentations/2024-12-10-rpkgs/index.html#package-scope",
    "title": "R Packages: There and Back Again",
    "section": "Package Scope",
    "text": "Package Scope\n\nThe R package can just be a small family of functions, it does not need to be the next tidyverse\nThe R package just needs to be useful to you and your team\nIt does not need to go up to the CRAN"
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#i-wish-i-had-started-years-ago",
    "href": "presentations/2024-12-10-rpkgs/index.html#i-wish-i-had-started-years-ago",
    "title": "R Packages: There and Back Again",
    "section": "I wish I had started years ago",
    "text": "I wish I had started years ago\n\nIf I had started honing this skill years ago, I would saved myself alot of headaches down the road."
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#reproducibility",
    "href": "presentations/2024-12-10-rpkgs/index.html#reproducibility",
    "title": "R Packages: There and Back Again",
    "section": "Reproducibility",
    "text": "Reproducibility\n\nBuilding a package bundles up all your code AND your dependencies\n\nNo more endless source() calls to helper scripts and functions\n\nUsers can enforce strict versioning of dependencies"
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#portability",
    "href": "presentations/2024-12-10-rpkgs/index.html#portability",
    "title": "R Packages: There and Back Again",
    "section": "Portability",
    "text": "Portability\nBuilding a package means that the code and documentation can be easily shared with others publicly and privately.\n\nNo more emailing code around\nNo more asking permission to access share drives or folders\nNo more manually cutting and pasting code all over the place"
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#clarity-and-organization",
    "href": "presentations/2024-12-10-rpkgs/index.html#clarity-and-organization",
    "title": "R Packages: There and Back Again",
    "section": "Clarity and Organization",
    "text": "Clarity and Organization\n\nThe package structure forces you to organize your code in a way that is easy to understand and use\nThe documentation lives alongside the code, making it easier to understand what the code does\nBuild tools allow pieces of documentation to be used over and over again\n\nUpdate once, and it updates everywhere\nConsistent language throughout"
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#distributing-your-package",
    "href": "presentations/2024-12-10-rpkgs/index.html#distributing-your-package",
    "title": "R Packages: There and Back Again",
    "section": "Distributing your Package",
    "text": "Distributing your Package\nSharing your R package is easy to do with git and a repository hosting service.\n\nGithub\nGitlab\nAzure Devops\nBitbucket"
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#sharing-publicly",
    "href": "presentations/2024-12-10-rpkgs/index.html#sharing-publicly",
    "title": "R Packages: There and Back Again",
    "section": "Sharing Publicly",
    "text": "Sharing Publicly\nYou may remember Chuck showing off the pak package in a previous meeting. Once an R package is hosted in a remote repository, pak is just about all users need to install the package.\n\npak::pak(\"&lt;GITHUB USERNAME&gt;/&lt;PACKAGE NAME&gt;\")\ninstall the development version of strata:\n\npak::pak(\"asenetcky/strata\")"
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#sharing-privately",
    "href": "presentations/2024-12-10-rpkgs/index.html#sharing-privately",
    "title": "R Packages: There and Back Again",
    "section": "Sharing Privately",
    "text": "Sharing Privately\n\nThe remotes package is a great way to install packages from a private repository.\nFor example we have a private CT DPH odp R package for internal use only that is hosted in our Azure Devops Project.\nInstalling that would look something like:\n\nremotes::install_git(\"&lt;REPO CLONE URL&gt;\", git = \"external)"
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#what-we-dont-have",
    "href": "presentations/2024-12-10-rpkgs/index.html#what-we-dont-have",
    "title": "R Packages: There and Back Again",
    "section": "What we don’t have",
    "text": "What we don’t have\n\nMost of us do not have access to the fanciest tools and services\nMost of us are not allowed to spool up a docker image, or server for development"
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#what-we-do-have",
    "href": "presentations/2024-12-10-rpkgs/index.html#what-we-do-have",
    "title": "R Packages: There and Back Again",
    "section": "What we do have",
    "text": "What we do have\n\nMost of us have access to R\nMost of us have access to git (whether we realize it or not)"
  },
  {
    "objectID": "presentations/2024-12-10-rpkgs/index.html#pulling-it-all-together",
    "href": "presentations/2024-12-10-rpkgs/index.html#pulling-it-all-together",
    "title": "R Packages: There and Back Again",
    "section": "Pulling it all together",
    "text": "Pulling it all together\nIf users combine:\n\nR\ngit\nYour own R Package\nrenv package\n\nUsers will have a powerful combination of tools where reproducibility is paramount."
  },
  {
    "objectID": "posts/2025-04-23-keyring/index.html",
    "href": "posts/2025-04-23-keyring/index.html",
    "title": "Managing Credentials with keyring",
    "section": "",
    "text": "How many times have you needed to enter an API token or perhaps credentials to a service account? Have you ever seen someone save credentials inside of a script? It happens, I’ve seen it - I hate to admit it, but I’ve probably done it myself. It’s easy to do when it’s crunch time. You tell yourself, you’ll remove them when you’re done testing - but, gasp - it’s too late, you’ve mindlessly committed and pushed those changes on up to the remote with git.\nOr maybe you’re new and just getting started with R. You’re almost certainly going to need to inject a credential or something similar sooner or later. You don’t have to leave these in your scripts. There is a better way!"
  },
  {
    "objectID": "posts/2025-04-23-keyring/index.html#the-challenge",
    "href": "posts/2025-04-23-keyring/index.html#the-challenge",
    "title": "Managing Credentials with keyring",
    "section": "",
    "text": "How many times have you needed to enter an API token or perhaps credentials to a service account? Have you ever seen someone save credentials inside of a script? It happens, I’ve seen it - I hate to admit it, but I’ve probably done it myself. It’s easy to do when it’s crunch time. You tell yourself, you’ll remove them when you’re done testing - but, gasp - it’s too late, you’ve mindlessly committed and pushed those changes on up to the remote with git.\nOr maybe you’re new and just getting started with R. You’re almost certainly going to need to inject a credential or something similar sooner or later. You don’t have to leave these in your scripts. There is a better way!"
  },
  {
    "objectID": "posts/2025-04-23-keyring/index.html#the-solution",
    "href": "posts/2025-04-23-keyring/index.html#the-solution",
    "title": "Managing Credentials with keyring",
    "section": "The Solution",
    "text": "The Solution\nThere is an R package out there that makes it just as easy not to hardcode credentials into scripts. That package is keyring!\nLet’s take a look.\n\nInstalling keyring\nI prefer to use pak to install R packages, so I will often install that first and then use it to install the desired packages.\n\n# install.packages(\"pak\")\n# pak::pak(\"keyring\")\n\nlibrary(keyring)\n\n\n\nPutting keyring into practice\nkeyring stores credentials using the default credential manager for your operating system. keyring makes interacting with that manager, inside of your code, fairly seamless.\n\n# keyring can be run interactively with pop ups\n# or you set the values in code - execute the code\n# and then remove those lines if anything is going to be saved\n\n# save some useful credentials\nkey_set_with_value(\n  service = \"my-service\",\n  username = \"my-username\",\n  password = \"my-super-secret-password-SSSHHHH\"\n)\n\n# interactively - you would call `key_set(\"my-service\")`\n# and fill in the details in the pop up.\n\n\n\n\n\n\n\nImportant\n\n\n\nRemember - you're just executing the code and not saving the\nplain text password or senstive information in the code in a real world situation.\n\n\nNow how would we access those credentials for later use? The service and username previously entered becomes the identifiers used to pull the credential back into your environment.\n\n# if you happen to forget your services\n# you can list them all out!\nkeyring::key_list()\n\n     service    username\n1 my-service my-username\n\n\nNotice how the usernames are listed alongside the service? Users should be aware of that if they do not want usernames showing up in the console output. However, we’ll exploit that functionality later on. All a logged in user needs to retrieve a credential is a service name and a username.\n\n\n\n\n\n\nCaution\n\n\n\nTypically keyrings are set per user and are thus subject to whatever security is employed around the user account. It is imperative that users take care to secure their accounts, otherwise one compromised account can quickly spill over into others.\n\n\nLet’s grab that credential now.\n\nkey_get(service = \"my-service\", username = \"my-username\")\n\n[1] \"my-super-secret-password-SSSHHHH\"\n\n\nSo the code above just prints straight to console - still not exactly what you would want in real life but now that can be saved to an object and used just about anywhere.\n\n\nExamples\nLet’s walk through some plausible examples:\n\n# remember - interactively we'd be using key_set(\"&lt;service name here&gt;\")\n\nkey_set_with_value(\n  service = \"open data portal\",\n  username = \"me@asenetcky.dev\",\n  password = \"mytotallyrealpassword123\"\n)\n\n# sometimes you just want to use the service name\n# and the password - and the \"password\" may\n# not even be a password per se.\n\nkey_set_with_value(\n  service = \"definitely real sql server connection string\",\n  password = \"127.0.0.1\"\n)\n\n\n\nHelper Functions\nKeyring works great for little private/internal helper functions and packages that you might write or contribute to in your line of work. Why not wrap a helper function around some keyring functionality?\n\n\n\n\n\n\nNote\n\n\n\nI am using renv - for dependency management and I think you should too but that can be the topic of another post. I am going to assume the reader is not using renv and list the libraries - but I may miss one because renv has spoiled me. Be sure to check our renv and its excellent documentation.\n\n\n\n# pak::pak(\n#   c(\n#     \"dplyr\", # for tidyverse data manipulations\n#     \"purrr\", # for funtional programming - and in our example, error catching\n#     \"glue\", # for easy formatted strings\n#     \"checkmate\", # for common checks in functions\n#     \"rlang\" # great for core language helpers\n#   )\n# )\n\n# if we use `renv` and don't mind using the full function name - package::function\n# you can avoid these library statements entirely.\nlibrary(dplyr)\nlibrary(purrr)\nlibrary(rlang)\nlibrary(glue)\nlibrary(checkmate)\n\nOur dependencies are set up - I’ll use the full function names so that there will be no ambiguity about what function comes from where.\n\nnab_service_cred &lt;- function(service_name) {\n  # check user input\n  # `checkmate` is great to testing function input\n  # and/or putting together unit tests in packages\n  checkmate::assert_character(service_name)\n\n  # handle global bindings\n  service &lt;- username &lt;- NULL\n\n  # grab email\n  email &lt;-\n    keyring::key_list() |&gt;\n    dplyr::filter(service == service_name) |&gt;\n    dplyr::pull(username)\n\n  # throw error if empty\n  if (purrr::is_empty(email)) {\n    rlang::abort(\n      glue::glue(\"service: '{service_name}' - credential not found\")\n    )\n  }\n\n  # grab password\n  password &lt;-\n    keyring::key_get(\n      service = service_name,\n      username = email\n    )\n\n  # return a named list\n  dplyr::lst(\n    email,\n    password\n  ) |&gt;\n    # probably best to return\n    # invisibily in case of unintended prints\n    invisible()\n}\n\nThis little helper can be a building block for other functionality in your scripts or package. Maybe you have a process upstream that handles errors elegantly - you can then wrap this up in purrr::safely() and then handle potential errors at your convenience.\n\nsafer_nab &lt;- purrr::safely(\n  nab_service_cred,\n  # set some default or placeholder values in case of errors\n  otherwise = dplyr::lst(\n    email = \"default-or-fake@email.com\",\n    password = \"default-or-fake-password.com\"\n  )\n)\n\n\n# test it out\nresults &lt;- safer_nab(\"not-a-service\")\nresults$result\n\n$email\n[1] \"default-or-fake@email.com\"\n\n$password\n[1] \"default-or-fake-password.com\"\n\n# the show goes on!\n# but if we want to see the error - we still can.\nresults$error$message\n\nservice: 'not-a-service' - credential not found\n\n# look there is our error message!\n\n\n# what about our service from before?\nresults &lt;- safer_nab(\"open data portal\")\nresults\n\n$result\n$result$email\n[1] \"me@asenetcky.dev\"\n\n$result$password\n[1] \"mytotallyrealpassword123\"\n\n\n$error\nNULL\n\n\nPlease keep in mind that keyring is very local to the user, and computer they are using. It is not a replacement for some more heavyweight solutions. However, it doesn’t cost users anything to use, it’s licensed under the permissive MIT license so it can generally be incorporated into codebases, and it is easy to use and readily available. So for simple setups and/or simple projects I cannot really think of a reason not to use it.\nHopefully these examples highlight how keyring can be a great tool to bolster security around credential handling in code, as well as a building block for helper functions that can get your team on the same page with connections, databases, service accounts and other credentials.\n\n\nCleaning up\nNow we have all these fake services and credentials in our operating system’s credential manager. How do user clean it all up? keyring has tools for that as well.\nUsers can use keyring::key_delete() to wipe out credentials they no longer want stored.\n\n# jog our memories about the services...\nkeyring::key_list()\n\n                                       service         username\n1                             open data portal me@asenetcky.dev\n2 definitely real sql server connection string                 \n3                                   my-service      my-username\n\n# oh yeah - these ones.\n\ndplyr::lst(\n  \"my-service\",\n  \"open data portal\",\n  \"definitely real sql server connection string\"\n) |&gt;\n  # let's borrow from our helper function\n  # I'm feeding the service names into our helper function\n  # so we can keep the service name and the email needed\n  # for the deletion in `purr::walk()`\n  purrr::map(\n    \\(serv) {\n      cred &lt;- nab_service_cred(serv)\n      cred$name &lt;- serv\n      cred\n    }\n  ) |&gt;\n  purrr::walk(\n    \\(cred) {\n      name &lt;- purrr::pluck(cred, \"name\")\n      email &lt;- purrr::pluck(cred, \"email\")\n      keyring::key_delete(service = name, username = email)\n    }\n  )\n\nkeyring::key_list()\n\n[1] service  username\n&lt;0 rows&gt; (or 0-length row.names)"
  },
  {
    "objectID": "posts/2025-04-23-keyring/index.html#your-turn",
    "href": "posts/2025-04-23-keyring/index.html#your-turn",
    "title": "Managing Credentials with keyring",
    "section": "Your turn",
    "text": "Your turn\nIf you haven’t already, check out keyring and see what use cases you can come up with."
  }
]