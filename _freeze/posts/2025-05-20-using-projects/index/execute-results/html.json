{
  "hash": "ec851badc0ec45372c70329fc2a74f36",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Using Projects to Organize and Think about your Code\"\nsubtitle: \"Using `fs` and friends\"\ndescription: \"Increasing Portability and Reproducibility\"\ndate: 05-20-2025\ncategories: [R, R-Package, Developer-Toolkit, Developer-Mindset] \ncitation: \n    url: https://asenetcky.dev/using-projects\ndraft: true \n---\n\n## The Premise\n\nHow many times have you seen this at the top of an R script\nthat was shared with you by a friend or colleague?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"~/some/path/not/on/your/computer/\")\n\nfoo <- function() {\n  print(\"AHHHH I NEED THIS TO WORK I HAVE A DEADLINE\")\n}\n\nfoo()\n```\n:::\n\n\nYou need that script to run - but it just blows up spectacularly\nin your face. You go in to change that line and then the script\nworks, or it doesn't. I find - more often than not - that\nif there is a `setwd()` at the top of a script, that even\nif I correct the path there are other depedencies that did\nnot come along for the ride.  There is nothing wrong\nwith using `setwd()` or `getwd()` - however, if you can\nafford to add another package dependency and you are\nprogrammatically working with the file system I think\nthe R pakcage `fs` is worth taking along for the ride.\n\n\nbut first ...\n\n## the zen of projects\n\n### some context\n\nI often find that new R users in my line of work don't organize their\nwork into distinct projects.  If they use the [Rstudio]() IDE\nthey aren't using rstudio projects with the `.Rproj` files or\nworkspaces in other IDEs. Using `git` will often force the\nuse of project folders or at least the mindset of one, but\noften git isn't in use either.\n\nI found that, while working in public health during a pandemic\nthat anything I may have produced in code - no matter how many times\nit was relayed to me that the ask was \"a one-time thing\" - will\nlive on forever whether you want it to or not. If it provided \nsome value, and even if it didn't, it became familiar and \neventually took on a life all its own.\nThis is probably true in many other fields - so do yourself a favor\nand make sure whatever it is you build is something that\nisn't going to haunt you. Use `git` if you're able, and \nif not work in projects to organize your work. It may\nnot seem like setting up a project is worth it for\na quick todo - but if the ask is worth doing at all,\nsetup a project however your IDE of choice expects it.\nIt will become second nature and so fast that the\nheadaches they solve down the road will more than\nmake up for the short amount of time learning \nand setting them up.\n\n### benefits of project spaces\n\nSo what are these benefits?  Most of the time\nsome background quality of life magic is happening.\nIn the case of Rstudio - the scripts are \"aware\" of\nwhere they are so you usually no longer have use `setwd()` or\n`getwd()`.  Project level settings can also be saved to\nthe project space. I think the biggest benefit of all\nis a shift in your own mindset.\n\nwhat is that shift? I don't know what to call it\nso I'm making it up right now - \"the zen of projects\".\nI probably read something like this somewhere and forgot\nthat this isn't my own idea. So I am so sorry if this is\nsomeone else's idea. I am not trying to pass it off as my own.\nIf there are other related articles, or there is one \nwhere inadvertantly took that name from please reach out to me.\nI will link them all here!\n\nWhat is the \"zen of projects\"? You start to think about your\nwork as tiny little ecosystems, a functioning unit of work, not as a single script.\na collection of scripts and all the things you need to for your work to....well, *work*.\nMy mind instantly flashes back to all the organelles inside of a cell \nthe mitochondria, the nucleous and all the other things I've completely\nforgotten about until I wrote that very sentence above. I think `git` \nhelps you get into this mindset most of all because you want folks\nto be able to clone or fork your source code and be able to have it work.\n\nSome of this might seem obvious to those in a more traditional\ndeveloper role in a more traditional developer job - but Git use is almost \nnon-existent in my area of work. I *almost never* get a `README.md` or other\nrelevant documentation.\nCode isn't thought about much other than as a means to an end in the *now*, \nand not a second thought is paid to the *future*.\n\nSo this is for my friends in public health and in government. \nI want to focus on the biggest gains for the least amount of effort. Incorporating\na project space is easy to do, becomes natural and gets folks into\nthis project zen that will hopefully get folks to start thinking about code reproducibility\nand portability.\n\n\n## why fs over base\n\nIt's spelled out right [here](https://fs.r-lib.org/articles/function-comparisons.html).\n\nBut the tl;dr is consistancy is king TODO....\n\n## use projects but take nothing for granted\n\nSo I went on that whole big thing about using projects, but here is the kicker,\ntake nothing for granted. Use absolute file paths without hardcoding absolute file paths.\n\nbut how? use `fs` and friends.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"pak\")\n# pak::pak(\"fs\")\n```\n:::\n\n\n<!-- run in a container for final render & freeze -->\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fs)\n\npath_home()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n/home/rstudio\n```\n\n\n:::\n\n```{.r .cell-code}\npath_wd()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n/workspaces/asenetcky.dev/posts/2025-05-20-using-projects\n```\n\n\n:::\n\n```{.r .cell-code}\ndir_tree(\n  path_wd(),\n  recurse = FALSE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n/workspaces/asenetcky.dev/posts/2025-05-20-using-projects\n├── index.qmd\n└── index.rmarkdown\n```\n\n\n:::\n\n```{.r .cell-code}\ndir_tree(\n  path_wd(),\n  recurse = TRUE\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n/workspaces/asenetcky.dev/posts/2025-05-20-using-projects\n├── index.qmd\n└── index.rmarkdown\n```\n\n\n:::\n:::\n\n\n\ntodo next steps\nuse tree\nshow this little folder with tree\n\nTODO:\n`here` is great - but less set it and forget - but you'll likely need in projects\nwith nested folders that use quarto or rmarkdown etc...\n\n## the end part\n\nSo what about you? What have you picked up along the way\nin your career that you would want new folks starting out\nto know?  Anything you picked up from another field, or\neven another programming language that your brought with\nyou to all your projects in other languages?",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}