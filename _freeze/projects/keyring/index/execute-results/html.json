{
  "hash": "85664480419c5e7f4fbda455b4fee84b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Managing Credentials with keyring\"\nsubtitle: \"Developer Toolkit\"\ndescription: \"Simple Credential Management\"\ndate: 04-23-2025\ncategories: [R, R-Package, Developer-Toolkit] \ncitation: \n    url: https://asenetcky.dev/keyring\ndraft: false \n---\n\n\n\n## The Problem\n\nHow many times have you needed to enter an API token or \nperhaps credentials to a service account? Have you ever seen\nsomeone save credentials inside of a script? It happens,\nI've seen it - I hate to admit it, but I've probably\ndone it myself.  It's easy to do when it's crunch time.\nYou tell yourself, you'll remove them when you're\ndone testing - but, gasp - it's too late, you've\nmindlessly commited and pushed those changes\non up to the remote with git.  \n\nOr maybe you're new and just getting started with\nR.  You're almost certainly going to need to\ninject a credential or something similiar sooner or\nlater. You _don't_ have to leave these in your\nscripts. There is a better way!\n\n## The Solution\nThere is an R package out there\nthat makes it just as easy _not_ to hardcode\ncredentials into scripts.  That package\nis [`keyring`](https://keyring.r-lib.org/index.html)!\n\nLet's take a look.\n\n\n### Installing `keyring`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"pak\")\n# pak::pak(\"keyring\")\n\nlibrary(keyring)\n```\n:::\n\n\n\n\n### Putting `keyring` into practice\n\n`keyring` stores credentials using the default credential\nmanager for your OS. `keyring` makes interacting with\nthe manager inside of your code fairly seamless.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# keyring can be run interactively with pop ups\n# or you set the values in code - execute the code\n# and then remove those lines if anything is going to be saved\n\n# save some useful credentials\nkeyring::key_set_with_value(\n  service = \"my-service\",\n  username = \"my-username\",\n  password = \"my-super-secret-password-SSSHHHH\"\n)\n```\n:::\n\n\n\n::: {.callout-important}\n    Remember - you're just executing the code and not saving the\n    free text in a real world situation.\n:::\n\nNow how would we access those credentials for later use?\n`service` and `username` becomes the identifier used to \npull these back into your environment.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# if you happen to forget your services\n# you can list them all out!\nkeyring::key_list()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           service         username\n1       my-service      my-username\n2 open data portal me@asenetcky.dev\n```\n\n\n:::\n\n```{.r .cell-code}\nkeyring::key_get(service = \"my-service\", username = \"my-username\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"my-super-secret-password-SSSHHHH\"\n```\n\n\n:::\n:::\n\n\n\nSo the code above just prints straight to console - still not exactly \nwhat you would want in real life but now that can be saved to\nan object and used just about anywhere. \n\nLet's walk through a plausible example - perhaps you frequent\nthe [CT Open Data Portal](https://data.ct.gov/)  (yay open data!)\nand you have an account with an email and password.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkeyring::key_set_with_value(\n  service = \"open data portal\",\n  username = \"me@asenetcky.dev\",\n  password = \"mytotallyrealpassword123\"\n)\n\n# let's use another awesome r package `RSocrata`\n\n# pak::pak(\"RSocrata\")\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}